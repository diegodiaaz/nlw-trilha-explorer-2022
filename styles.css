* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body * {
  font-family: 'Inter', sans-serif;
  line-height: 160%;
}

body {
  background-image: url(./assets/Fundo.jpg);
  background-position: top center;
  background-size: 100% auto;
  background-repeat: no-repeat;
  background-color: #121214;
}

header {
  margin-top: 32px;

  /* função de cálculo no css, nesse caso usado para calcular a altura do header, adicionando 32px
  para não grudar o header com a caixa de jogos */
  height: calc(120px + 32px);
}

header div {
  /* delimitando uma largura máxima para a div */
  width: 120px;
  /* como a div não tem propriedade de texto, temos que alinha ao centro dessa maneira, 
  com margin: auto */
  margin: auto;

  background-image: linear-gradient(90deg, #9572FC 0%, #43E7AD 50.52%, #E2D45C 100%);

  /*arredondando para tirar a quina colorida da div*/
  border-radius: 50%;

  /* apenas colocando display flex na caixa, como só tem um elemento, não precisa 
  arrumar nada, ele ja conseguiu se organizar */
  display: flex;
  /* colocanco preenchimento na caixa para mostrar a borda colorida */
  padding: 4px;

  /* adicionando transição para a propriedade transform, suavizando o efeito de pulsação */
  transition: transform .3s;
}

/* div:hover - significa que quando passar o mouse em cima da div, ele vai aplicar propriedades
indicadas nas "{}" */
header div:hover {
  /* transformar a escala do elemento quando passar o mouse em cima, dando o efeito de pulsar */
  transform: scale(1.1);
}

header div img {
  /* dizendo que a imagem deve usar 100% da largura da caixa (div), utilizando assim, os 120 px
  delimitados */
  width: 100%;
  border-radius: 50%;
}

main {
  max-width: 580px;
  width: 90%;
  margin: 32px auto;

  display: flex;
  flex-direction: column;
  gap: 24px;
}

section {
  color: white;

  /* propriedade pra deixar a linha colorida acima da caixa */
  background-image: linear-gradient(90deg, #9572FC 0%, #43E7AD 50.52%, #E2D45C 100%);

  /* usando padding top para a cor aparecer um pouco acima da div */
  padding-top: 4px;

  /* usando esse arredondamento para esconder as pontas de baixo da parte colorida, e
  para aumentar um pouco as extremidades da caixa */
  border-radius: 10px;
}

section div {
  background-color: #2a2634;
  padding: 32px;
  padding-top: 24px;
  border-radius: 8px;
}

section h2 {
  letter-spacing: -0.47px;
}

section p {
  letter-spacing: -0.18px;
  color: #A1A1AA;
}

section ul {
  list-style: none;
  display: flex;
  /* flex-wrap - propriedade usada para quando acabar o espaço dentro da caixa, ele não jogar
  os elementos pro lado e sim para baixo, respeitando o limite da caixa e da tela */
  flex-wrap: wrap;
  /* a propriedade gap, só funciona pq estamos usando display flex (funciona também com grid) */
  gap: 16px;

  margin-top: 24px;
}

section ul li {
  transition: transform .3s;
}

section ul li:hover {
  transform: scale(1.1);
}

.games-list img {
  width: 90px;
  /* border-radius é arredondamento de borda */
  border-radius: 8px;
}

.channel-list img {
  border-radius: 50%;
  width: 50px;
  border: 1px solid #443e54;
}

/* animation */

header div {
  /* adicionando a animação; colocando o tempo que eu quero que demore para completar a 
  animação de caindo (.7s); colocando quando tempo eu quero que demore pra imagem aparecer e
  começar a cair, mais conhecido como delay (.4s); pega as informações da animação e mantém
  na tag (backwards) */
  animation: fromTop .7s .2s backwards;
}

main section {
  animation: fromBottom .7s backwards;
}

/* "main, pega a section filho número(*) e..." */
main section:nth-child(1) {
  animation-delay: 0;
}

main section:nth-child(2) {
  animation-delay: .4s;
}

main section:nth-child(3) {
  animation-delay: .8s;
}

/* fromTop é apenas a identificação/nome da animação */
@keyframes fromTop {

  /* nessa animação, estamos dizendo que o elemento que a tiver, terá a animação de "caindo".
  saindo de um pouco acima da sua posição inicial (-30px), e indo para a posição original (0) */
  from {
    opacity: 0;
    /* é o translate que vai mover o elemento, nesse caso no eixo Y (eixo vertical)  */
    transform: translateY(-30px)
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fromBottom {
  from {
    opacity: 0;
    transform: translateY(30px)
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}